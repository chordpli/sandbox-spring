plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '6.24.0'
}

group = 'com.pli'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	//	swagger https://springdoc.org/#Introduction
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	annotationProcessor "org.projectlombok:lombok"

	compileOnly 'org.projectlombok:lombok'
	
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'com.h2database:h2'
	
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.mockito:mockito-core:5.18.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework:spring-test'
	testImplementation 'org.springframework:spring-context'
	testImplementation 'org.springframework.boot:spring-boot-test-autoconfigure'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	testImplementation 'org.testcontainers:junit-jupiter:1.20.0'
	testImplementation 'org.testcontainers:postgresql:1.20.0'
}

tasks.named('test') {
	useJUnitPlatform()
	jvmArgs = ['-Xmx4g', '-Dspring.profiles.active=test']
}

spotless {
  java {
    importOrder()
    removeUnusedImports()
    cleanthat()
    palantirJavaFormat()
    formatAnnotations()
    targetExclude("src/main/generated/**/*.java")
  }
}

tasks.register('updateGitHooks', Copy) {
	from './scripts/pre-commit'
	into './.git/hooks'
}

tasks.register('makeGitHooksExecutable', Exec) {
	commandLine 'chmod', '+x', './.git/hooks/pre-commit'
	dependsOn updateGitHooks
}

compileJava.dependsOn makeGitHooksExecutable

// Querydsl 설정부
def querydslSrcDir = 'src/main/generated'

// querydsl QClass 파일 생성 위치 지정
tasks.withType(JavaCompile).configureEach {
	options.getGeneratedSourceOutputDirectory().set(file(querydslSrcDir))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [querydslSrcDir]
	test.java.srcDirs += [querydslSrcDir]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(querydslSrcDir)
}